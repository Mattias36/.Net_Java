@page "/weather"
@attribute [StreamRendering]
@rendermode InteractiveServer

<PageTitle>Weather</PageTitle>

<h1>Weather</h1>

<p>This component demonstrates showing data.</p>

@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <input class="form-control mb-3" placeholder="Filtruj po opisie" @oninput="Input" />
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Temp. (C)</th>
                <th>Temp. (F)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in forecasts)
            {
                <tr>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
                </tr>
            }
        </tbody>
    </table>
    <p><strong>Liczba ciepłych dni (&gt;15°C):</strong> @warmDays</p>
    <button class="btn btn-primary" @onclick="WarmDaysFilter">Pokaż tylko ciepłe dni</button>
    <button class="btn btn-secondary" @onclick="Restore">Przywróć wszystkie</button>

}

@code {
    private WeatherForecast[]? forecasts;
    private int warmDays;
    private WeatherForecast[]? originalForecasts;

    protected override async Task OnInitializedAsync()
    {
        // Simulate asynchronous loading to demonstrate streaming rendering
        await Task.Delay(500);
        
        var startDate = DateOnly.FromDateTime(DateTime.Now);
        var summaries = new[] { "Freezing", "Bracing", "Chilly", "Cool", "Mild", "Warm", "Balmy", "Hot", "Sweltering", "Scorching" };
    

        forecasts = Enumerable.Range(1, 10).Select(index => new WeatherForecast
        {
            Date = startDate.AddDays(index),
            TemperatureC = Random.Shared.Next(-20, 55),
            Summary = summaries[Random.Shared.Next(summaries.Length)]
        }).ToArray();
        originalForecasts = forecasts.ToArray();
        warmDays = forecasts.Count(f => f.TemperatureC > 15);
    }

    private void WarmDaysFilter()
    {
        forecasts = originalForecasts
            ?.Where(f => f.TemperatureC > 15)
            .ToArray();
    }

    private void Restore()
    {
        forecasts = originalForecasts?.ToArray();
    }

    private string filterText = "";

    private void Input(ChangeEventArgs e)
    {
        filterText = e?.Value?.ToString() ?? "";
        forecasts = originalForecasts
            ?.Where(f => f.Summary != null && f.Summary.Contains(filterText, StringComparison.OrdinalIgnoreCase))
            .ToArray();
    }

    private class WeatherForecast
    {
        public DateOnly Date { get; set; }
        public int TemperatureC { get; set; }
        public string? Summary { get; set; }
        public int TemperatureF => 32 + (int)(TemperatureC / 0.5556);

    }
}
